"""
Script de demostraci√≥n para los endpoints de estad√≠sticas usando devactivo.com como ejemplo.
"""

import requests
import time
import json
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8000"
API_PREFIX = "/api/v1"

def demo_stats_endpoints():
    """Demostraci√≥n de los endpoints de estad√≠sticas usando devactivo.com como ejemplo."""
    
    print("üöÄ Demostraci√≥n de Endpoints de Estad√≠sticas")
    print("=" * 50)
    
    # 1. Crear un job de scraping para devactivo.com
    print("\n1. Creando job de scraping para devactivo.com...")
    try:
        response = requests.post(
            f"{BASE_URL}{API_PREFIX}/jobs",
            json={
                "start_url": "https://devactivo.com",
                "depth": 2,
                "languages": ["es", "en"],
                "delay": 1.0
            }
        )
        
        if response.status_code == 200:
            job_data = response.json()
            job_id = job_data["job_id"]
            print(f"‚úÖ Job creado exitosamente: {job_id}")
            print(f"   Estado: {job_data['status']}")
            print(f"   Mensaje: {job_data['message']}")
        else:
            print(f"‚ùå Error al crear job: {response.status_code}")
            print(f"   Detalle: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return
    
    # Esperar un momento para que el job se procese
    print("\n   Esperando a que el job se inicialice...")
    time.sleep(3)
    
    # 2. Obtener estad√≠sticas del sistema
    print("\n2. Obteniendo estad√≠sticas del sistema...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/stats/system")
        
        if response.status_code == 200:
            stats_data = response.json()
            print(f"‚úÖ Estad√≠sticas del sistema obtenidas:")
            print(f"   Jobs activos: {stats_data['active_jobs']}")
            print(f"   Jobs hoy: {stats_data['total_jobs_today']}")
            print(f"   Leads hoy: {stats_data['total_leads_today']}")
            print(f"   Emails hoy: {stats_data['total_emails_today']}")
            print(f"   Salud del sistema: CPU {stats_data['system_health']['cpu_usage_percent']}%")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas del sistema: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 3. Obtener estad√≠sticas de scraping
    print("\n3. Obteniendo estad√≠sticas de scraping...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/stats/scraping?period=day")
        
        if response.status_code == 200:
            scraping_data = response.json()
            print(f"‚úÖ Estad√≠sticas de scraping obtenidas:")
            print(f"   Per√≠odo: {scraping_data['period']}")
            print(f"   URLs procesadas: {scraping_data['total_urls_processed']}")
            print(f"   Tasa de √©xito: {scraping_data['success_rate']}%")
            print(f"   Tiempo promedio: {scraping_data['avg_processing_time']}ms")
            print(f"   Dominios crawleados: {scraping_data['domains_crawled']}")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas de scraping: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 4. Obtener estad√≠sticas avanzadas
    print("\n4. Obteniendo estad√≠sticas avanzadas...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/advanced-stats/advanced?days=30")
        
        if response.status_code == 200:
            advanced_data = response.json()
            print(f"‚úÖ Estad√≠sticas avanzadas obtenidas:")
            print(f"   Total websites: {advanced_data['websites']['total_websites']}")
            print(f"   Websites con emails: {advanced_data['websites']['websites_with_emails']}")
            print(f"   Total emails: {advanced_data['emails']['total_emails']}")
            print(f"   Emails √∫nicos: {advanced_data['emails']['unique_emails']}")
            print(f"   Total jobs: {advanced_data['jobs']['total_jobs']}")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas avanzadas: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 5. Obtener estad√≠sticas en tiempo real
    print("\n5. Obteniendo estad√≠sticas en tiempo real...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/advanced-stats/realtime")
        
        if response.status_code == 200:
            realtime_data = response.json()
            print(f"‚úÖ Estad√≠sticas en tiempo real obtenidas:")
            print(f"   Sesiones activas: {realtime_data['active_sessions']}")
            print(f"   Jobs procesando: {realtime_data['processing_jobs']}")
            print(f"   Emails √∫ltima hora: {realtime_data['emails_found_last_hour']}")
            print(f"   Websites √∫ltima hora: {realtime_data['websites_processed_last_hour']}")
            print(f"   Carga del sistema: {realtime_data['system_load']}")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas en tiempo real: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 6. Obtener estad√≠sticas de un dominio espec√≠fico
    print("\n6. Obteniendo estad√≠sticas del dominio devactivo.com...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/advanced-stats/domain/devactivo.com")
        
        if response.status_code == 200:
            domain_data = response.json()
            print(f"‚úÖ Estad√≠sticas del dominio obtenidas:")
            print(f"   Dominio: {domain_data['domain']}")
            print(f"   Total websites: {domain_data['total_websites']}")
            print(f"   Websites con emails: {domain_data['websites_with_emails']}")
            print(f"   Total emails: {domain_data['total_emails']}")
            print(f"   Emails √∫nicos: {domain_data['unique_emails']}")
            print(f"   Puntuaci√≥n de calidad: {domain_data['average_quality_score']}")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas del dominio: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    # 7. Obtener estad√≠sticas detalladas de un job
    print("\n7. Obteniendo estad√≠sticas detalladas del job...")
    try:
        response = requests.get(f"{BASE_URL}{API_PREFIX}/advanced-stats/job/{job_id}/detailed")
        
        if response.status_code == 200:
            job_stats_data = response.json()
            print(f"‚úÖ Estad√≠sticas detalladas del job obtenidas:")
            print(f"   Job ID: {job_stats_data['job_id']}")
            print(f"   Estado: {job_stats_data['status']}")
            print(f"   Progreso: {job_stats_data['progress']}%")
            print(f"   Items procesados: {job_stats_data['processed_items']}/{job_stats_data['total_items']}")
            print(f"   Intentos: {job_stats_data['attempts']}")
        else:
            print(f"‚ùå Error al obtener estad√≠sticas detalladas del job: {response.status_code}")
            print(f"   Detalle: {response.text}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ Demostraci√≥n completada")

if __name__ == "__main__":
    demo_stats_endpoints()