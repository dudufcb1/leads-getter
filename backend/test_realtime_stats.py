#!/usr/bin/env python3
"""
Script para validar la actualizaci√≥n en tiempo real de las estad√≠sticas.
"""

import requests
import time
import json
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://devactivo.com/api/v1/stats"

def test_realtime_updates():
    """Prueba la actualizaci√≥n en tiempo real de las estad√≠sticas."""
    print("üîç Probando actualizaci√≥n en tiempo real de estad√≠sticas...")
    
    try:
        # Obtener estad√≠sticas iniciales
        print("Obteniendo estad√≠sticas iniciales...")
        response1 = requests.get(f"{BASE_URL}/system")
        if response1.status_code != 200:
            print(f"‚ùå Error al obtener estad√≠sticas iniciales: {response1.status_code}")
            return False
            
        initial_stats = response1.json()
        print(f"‚úÖ Estad√≠sticas iniciales obtenidas")
        print(f"   Active jobs: {initial_stats.get('active_jobs', 'N/A')}")
        print(f"   Total jobs today: {initial_stats.get('total_jobs_today', 'N/A')}")
        
        # Esperar un momento
        print("\nEsperando 5 segundos...")
        time.sleep(5)
        
        # Obtener estad√≠sticas despu√©s de un tiempo
        print("Obteniendo estad√≠sticas despu√©s de 5 segundos...")
        response2 = requests.get(f"{BASE_URL}/system")
        if response2.status_code != 200:
            print(f"‚ùå Error al obtener estad√≠sticas posteriores: {response2.status_code}")
            return False
            
        updated_stats = response2.json()
        print(f"‚úÖ Estad√≠sticas posteriores obtenidas")
        print(f"   Active jobs: {updated_stats.get('active_jobs', 'N/A')}")
        print(f"   Total jobs today: {updated_stats.get('total_jobs_today', 'N/A')}")
        
        # Verificar que los datos se hayan actualizado
        print("\nVerificando actualizaci√≥n de datos...")
        if (initial_stats.get('active_jobs') == updated_stats.get('active_jobs') and
            initial_stats.get('total_jobs_today') == updated_stats.get('total_jobs_today')):
            print("‚ö†Ô∏è  Los datos no han cambiado, pero esto puede ser normal si no hay actividad")
        else:
            print("‚úÖ Los datos se han actualizado correctamente")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de actualizaci√≥n en tiempo real: {e}")
        return False

def test_cache_invalidation():
    """Prueba la invalidaci√≥n del cache."""
    print("üîç Probando invalidaci√≥n del cache...")
    
    try:
        # Obtener estad√≠sticas con cache
        print("Obteniendo estad√≠sticas (con cache)...")
        start_time = time.time()
        response1 = requests.get(f"{BASE_URL}/system")
        first_call_time = time.time() - start_time
        
        if response1.status_code != 200:
            print(f"‚ùå Error al obtener estad√≠sticas: {response1.status_code}")
            return False
            
        # Obtener estad√≠sticas nuevamente (deber√≠a usar cache)
        print("Obteniendo estad√≠sticas nuevamente (deber√≠a usar cache)...")
        start_time = time.time()
        response2 = requests.get(f"{BASE_URL}/system")
        second_call_time = time.time() - start_time
        
        if response2.status_code != 200:
            print(f"‚ùå Error al obtener estad√≠sticas: {response2.status_code}")
            return False
            
        print(f"‚úÖ Tiempos de respuesta:")
        print(f"   Primera llamada: {first_call_time:.4f} segundos")
        print(f"   Segunda llamada: {second_call_time:.4f} segundos")
        
        # La segunda llamada deber√≠a ser m√°s r√°pida debido al cache
        if second_call_time < first_call_time:
            print("‚úÖ El cache est√° funcionando correctamente (segunda llamada m√°s r√°pida)")
        else:
            print("‚ö†Ô∏è  El cache puede no estar funcionando √≥ptimamente")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de cache: {e}")
        return False

def test_historical_data_consistency():
    """Prueba la consistencia de los datos hist√≥ricos."""
    print("üîç Probando consistencia de datos hist√≥ricos...")
    
    try:
        # Obtener datos hist√≥ricos con diferentes per√≠odos
        periods = ["day", "week", "month"]
        
        for period in periods:
            print(f"Obteniendo datos hist√≥ricos para per√≠odo: {period}")
            response = requests.get(f"{BASE_URL}/historical?period={period}")
            
            if response.status_code != 200:
                print(f"‚ùå Error al obtener datos hist√≥ricos para {period}: {response.status_code}")
                return False
                
            data = response.json()
            print(f"‚úÖ Datos obtenidos para {period}")
            print(f"   Puntos de datos: {len(data.get('data', []))}")
            
            # Verificar estructura de datos
            if 'data' not in data:
                print(f"‚ùå Estructura de datos incorrecta para {period}")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de datos hist√≥ricos: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas."""
    print("üöÄ Iniciando pruebas de actualizaci√≥n en tiempo real...")
    print("=" * 60)
    
    tests = [
        ("Actualizaci√≥n en tiempo real", test_realtime_updates),
        ("Invalidaci√≥n del cache", test_cache_invalidation),
        ("Consistencia de datos hist√≥ricos", test_historical_data_consistency),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Ejecutando: {test_name}")
        print("-" * 40)
        success = test_func()
        results.append((test_name, success))
        
        if success:
            print(f"‚úÖ {test_name}: PASSED")
        else:
            print(f"‚ùå {test_name}: FAILED")
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüìà Resultado: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas de actualizaci√≥n en tiempo real pasaron exitosamente!")
        return 0
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron")
        return 1

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)